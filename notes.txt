TODO:
	- fix: bullets can damage ships outside the visible area - at least
	       a part of them should be visible in order to be able to take damage

	- apply scripts for bullets
		-ships may have any number of different weapon setups
		-to execute: shoot <weapon>
		-maybe maybe: rotateWeapon <weapon> <relative rotation>
			-then the weapon itself decide what a "shot" means
2017.09.17.
	-bending background gently via command scripts

2017.09.16.
	-remove test ripple effect and make it nice and easy to call
	-check space bending weight scripts and their limit

2017.09.09
	-fixed stuttering uv scroll on background texture	

2017.09.08
	- cleanup
	- for loop in spawner

	- ... and this is done. ^_^

2017.09.03
	-ok what now?
		-when spawning enemies, reset scripts
			- ok, done

	-set up script for simply moving towards the bottom while
	 spinning
		- so that also means handling ending the command script execution
			- ok, done

	(-and then maybe we could spawn scripts by passing in arguments from another
	 script (like: spawn this ship with this script and this parameters to that script))

	-and be able to handle //comments in scripts

	-set up script for enemy spawner:
		<deltaT> spawn <what> <where> <how>

	== But how to avoid GetComponents when spawning?
	- How about this:
		- spawn comes with - at least - a string param. IPoolables will receive this
		- then the ship as IPoolable will assume that the param it received is the
		  script that it needs
		- and it looks up scripts in the ... singleton scriptlibrary
		- let's do that
	
	== ok. now how about spawning <what> <where> <how>?
		- what: passed in as param
		- where: set own transform there?
			- well, why not

	=> OK, so we can make a plan.
		1.) EnemySpawner should be / implement a scriptrunner too.

			=> actually, ShipScriptRunner can just be made more generic
			=> it all should work just via interfaces
	-			=> ok this is actually done
		2.) So it should implement IMoveControl too
				=> and this we get for free
		3.) And IMoveControl should be able to set position from outside
				=> ok done
		4.) It should be possible to parse a spawn command
				=> what: kind of enemy
				=> where: position:
					=> x, y
				=> how: script to run

		5.) and EnemySpawner should be able to execute it
			== > and it is done :)

		6.) accept empty string as script param
			=> done

2017.08.30
	-spawner set up for enemies;
	-need to think about formal spawning process,
	 where e.g. scripts get reset, and we do whatever
	 initialization we need to do (e.g. reset health &c).
	-in fact maybe despawning could also be better formalized
	 -> like, what are the steps that we should always do just
	 before returning to the pool?

2017.08.28.
	- out-of-bounds check & setting velocity.
		- option 1: do this with colliders
			- we _have_ colliders already, and we do
			  check for collisions anyway
			- simpler control of the relevant area
			- but maybe this would not play so nicely with dynamic zoom
		- option 2: position check	
2017.08.27.
	OK, so what to do next?
	- spawn? -> but this would be a different script; this could be a task for another day.
	- move? -> this could mean 2 things:
		-> setting velocity
		-> setting move in tampered viewport coordinates
			=> so for this I'd need out-of-bounds check as well, and possibly DOTween

	- pooling of ships
		-> this could go with spawning.

	- so, what to do?
	- let's do code cleanup - separate classes for separate files &c,
		and making enemies poolable

2017.08.26.
	OK so let's get to command processing finally!
	and let's do this with rotation.

	<delay> spin <x> <y> <z> <t>		// -> rotation speeds, degree; t: time to lerp there in secs

	// "Hello world:"
	repeat
	1 spin x y z t1
	1 spin p q r t2
	end

	so then:
	1.) create language definition -- done
	2.) set up actual command objects for this
		-but let's start at the other end:
			-update: advance timer
			-	if delay for next command exceeded: do that command
				- get next command if any, check delay immediately, continue until you have to
	3.) make it run

	=== problem though. So this kind of definining sh*t is very generic,
	but conversions / boxing should be avoided when executing them, really.
	So maybe the way to go is to have factory, creating commands of appropriate
	type, with appropriately typed fields


2017.08.23.

	So how should movement happen? Coordinates are given in viewport
	space (0,0) - (1,1), and get tweaked such that they don't use the full
	viewport, but instead try to scale gradually, keeping a bit closer
	to the original 9:16 reference resolution.

	So that's good, I can have a set of coordinates and ask the dude to
	go there.

	=> actually it'd be better to get the coordinates converted, for
	internal use, into world coordinates, because then we cna make easier
	comparison with current coords; and calculate e.g. deltas. But
	that's a bit beside the point.

	The point is: so I have coordinates: I have to go there. Question,
	how. Do we use DoTween?
		- actually I'm inclined to say yes, let's not
		reinvent the wheel, instead find out more about it,
		and see how we can use it to its fullest potential.
	
	=> so in this case we just launch a tween, with params supplied
	with the command, e.g:

	move (0.1, 0.635) <deltaT> <easing> <additional_params>

	

